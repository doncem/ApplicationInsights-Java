import com.microsoft.applicationinsights.build.tasks.PropsFileGen

/*
 * ApplicationInsights-Java
 * Copyright (c) Microsoft Corporation
 * All rights reserved.
 *
 * MIT License
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the ""Software""), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
plugins {
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

apply from: "$buildScriptsDir/common-java.gradle"
apply from: "$buildScriptsDir/publishing.gradle"

archivesBaseName = 'applicationinsights-spring-boot-starter'
version = project.properties['spring.boot.starter.version-number']

def starterVersionFileDir = "$project.buildDir/src/generated/main/resources"
task generateVersionProperties(type: PropsFileGen) {
    targetFile = new File(starterVersionFileDir, "starter-version.properties")
    property "version", project.version
}

processResources.dependsOn generateVersionProperties

sourceSets {
    main {
        resources {
            srcDir starterVersionFileDir
        }
    }
}

dependencies {
    compile(project(':core'))
    compile(project(':web'))
    compile(project(':ApplicationInsightsInternalLogger'))
    compile ([group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'])
    compileOnly('org.springframework.boot:spring-boot:1.5.9.RELEASE')
    compileOnly('org.springframework.boot:spring-boot-autoconfigure:1.5.9.RELEASE')
    compileOnly('org.springframework.boot:spring-boot-starter-web:1.5.9.RELEASE')
    compileOnly('org.springframework.boot:spring-boot-configuration-processor:1.5.9.RELEASE')
    testCompile('junit:junit:4.12')
    testCompile('org.springframework.boot:spring-boot-starter-test:1.5.9.RELEASE')
    testCompile('org.springframework.boot:spring-boot:1.5.9.RELEASE')
    testCompile('org.springframework.boot:spring-boot-autoconfigure:1.5.9.RELEASE')
    testCompile('org.springframework.boot:spring-boot-starter-web:1.5.9.RELEASE')
    testCompile('org.springframework.boot:spring-boot-configuration-processor:1.5.9.RELEASE')
    testCompile('org.assertj:assertj-core:2.6.0')
}

ext.dependenciesPrefix = 'com.microsoft.applicationinsights.boot.dependencies'
shadowJar {
    dependencies {
        exclude(project(':core'))
        exclude(project(':web'))
        exclude(project(':ApplicationInsightsInternalLogger'))
        exclude(dependency([group: 'eu.infomas', name: 'annotation-detector', version: '3.0.5']))
        exclude(dependency([group: 'commons-io', name: 'commons-io', version: '2.6']))
        exclude(dependency([group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3']))
        // Transitive dependencies of httpclient that needs to be excluded seperately as shadow jar doesn't exclude them
        // automatically.
        exclude(dependency([group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.6']))
        exclude(dependency([group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.6']))
        // end excluding transitive dependencies

        exclude(dependency([group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.3']))
        exclude(dependency([group: 'com.google.guava', name: 'guava', version: '26.0-android']))
        exclude(dependency([group: 'com.google.code.gson', name: 'gson', version: '2.8.2']))
        
        // exclude gRPC and protobuf dependencies
        exclude(dependency([group: 'com.google.protobuf', name:'protobuf-java', version:'3.6.1']))
        exclude(dependency([group: 'io.grpc', name: 'grpc-stub', version: '1.16.1']))
        exclude(dependency([group: 'io.grpc', name: 'grpc-protobuf', version: '1.16.1']))
        exclude(dependency([group: 'io.grpc', name: 'grpc-context', version: '1.16.1']))
        exclude(dependency([group: 'com.google.code.gson', name: 'gson', version: '2.8.2']))
        exclude(dependency([group: 'com.google.guava', name: 'guava', version: '20.0']))
        exclude(dependency([group: 'com.google.errorprone', name: 'error_prone_annotations', version: '2.2.0']))
        exclude(dependency([group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2']))
        exclude(dependency([group: 'io.opencensus', name: 'opencensus-api', version: '0.12.3']))
        exclude(dependency([group: 'io.opencensus', name: 'opencensus-contrib-grpc-metrics', version: '0.12.3']))
        exclude(dependency([group: 'io.grpc', name: 'grpc-core', version: '1.16.1']))
        exclude(dependency([group: 'com.google.protobuf', name: 'protobuf-java', version: '3.6.1']))
        exclude(dependency([group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: '1.0.0']))
        exclude(dependency([group: 'io.grpc', name: 'grpc-protobuf-lite', version: '1.16.1']))
        exclude(dependency([group: 'io.grpc', name: 'grpc-netty-shaded', version: '1.16.1']))
        exclude(dependency([group: 'org.codehaus.mojo', name: 'animal-sniffer-annotations', version: '1.17']))
        exclude(dependency([group: 'org.checkerframework', name: 'checker-compat-qual', version: '2.5.2']))
        exclude(dependency([group: 'com.google.j2objc', name:'j2objc-annotations', version: '1.1']))

    }
    classifier=''
    relocate 'org.apache.commons', "${dependenciesPrefix}.apachecommons"
    relocate 'com.google', "${dependenciesPrefix}.google"
}

jar {
    dependsOn shadowJar
    enabled = false
}

compileJava.dependsOn(processResources)
// region Publishing properties

projectPomName = project.msftAppInsightsJavaSdk + " Spring Boot starter"
projectPomDescription = "This is the Spring Boot starter of " + project.msftAppInsightsJavaSdk

whenPomConfigured = { p ->
    def agentArtifactId = project(":agent").jar.baseName
    def loggerArtifactId = project(":ApplicationInsightsInternalLogger").jar.baseName
    p.dependencies = p.dependencies.findAll { dep -> dep.scope == "test" ||
            dep.artifactId != agentArtifactId && dep.artifactId != loggerArtifactId &&
            !(dep.groupId in ['org.apache.http', 'eu.infomas', 'org.apache.commons', 'commons-io',
                              'com.google.guava', 'com.google.code.gson', 'org.apache.httpcomponents',
                              'io.grpc', 'com.google.protobuf'])}
}
